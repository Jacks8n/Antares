#pragma use_dxc
#pragma enable_d3d11_debug_symbols

#pragma kernel GenerateMatVolume
#pragma kernel GenerateIndirectArgs
#pragma kernel GenerateMipDispatch
#pragma kernel GenerateSceneVolume
#pragma kernel GenerateMipMap

#include "HLSLSupport.cginc"
#include "SDFUtil.cginc"

/// begin definations used by multiple kernels

#define SDF_SUPREMUM 4.0
#define SDF_TO_SNORM (1.0 / SDF_SUPREMUM)
#define SDF_MAX float(1 << 15)

#define MAT_VOLUME_SCALE 4

#define MAX_GROUP_BRUSH_COUNT 64
#define MAX_THREAD_BRUSH_COUNT 16
#define MAX_BRUSH_PARAMETER_COUNT 8 // maximum number of parameter that a brush can have

#define BRUSH_TYPE_NUMERICAL 0
#define BRUSH_TYPE_SPHERE 1
#define BRUSH_TYPE_CUBE 2

/// begin constant buffer

CBUFFER_START(SDFGenerationParameters)
    // transform mip 0 scene's indices to world position
    float4x3 SceneToWorld;

    float2 BrushCullRadius;
    #define MAT_TILE_CULL_RADIUS_W BrushCullRadius.x
    #define MAT_GRID_CULL_RADIUS_W BrushCullRadius.y

    uint SDFBrushCount;
CBUFFER_END

CBUFFER_START(MipGenerationParameters)
    uint3 PrevMipVolumeSize;

    uint DispatchArgumentsOffset;
CBUFFER_END

/// end constant buffer

/// begin brush definition

extern Texture3D < snorm float > BrushAtlas;
extern SamplerState SDFSampler_Linear_Clamp;

extern Buffer<float> BrushParameters;

groupshared float BrushParams_GSM[MAX_GROUP_BRUSH_COUNT * MAX_BRUSH_PARAMETER_COUNT];
groupshared uint BrushParamCount_GSM;

float3 VolumeIndexToWorldPos(float3 index)
{
    return mul(float4(index, 1.0), SceneToWorld);
}

struct SDFBrush
{
    float4x3 WorldToLocal;
    
    uint Type;
    
    uint MaterialID;
    
    uint ParameterOffsetCount;
    
    float ScaleInv;
    
    float3 GetLocalPosition(float3 wpos)
    {
        const float3 tInv = WorldToLocal._41_42_43;
        const float3x3 srInv = float3x3(WorldToLocal._11_21_31,
        WorldToLocal._12_22_32,
        WorldToLocal._13_23_33);

        return mul(srInv, wpos + tInv);
    }
    
    uint GetMaterialID()
    {
        return MaterialID;
    }
    
    float GetUniformScaleInv()
    {
        return ScaleInv;
    }
    
    // only used when loading from global memory, it will be overwritten after loading
    uint GetParameterCount_UAV()
    {
        return ParameterOffsetCount >> 24;
    }
    
    uint GetParameterOffset_UAV()
    {
        return ParameterOffsetCount & 0xffffff;
    }
    
    void SetParameterOffset_GSM(uint offset)
    {
        ParameterOffsetCount = offset;
    }
    
    uint GetParameterOffset_GSM()
    {
        return ParameterOffsetCount;
    }
    
    bool IsLoadedToGSM()
    {
        return GetParameterCount_UAV() == 0;
    }
    
    #define Declare_GetParameter(dim)                                               \
    float##dim GetParameter##dim(uint offset)                                   \
    {                                                                           \
        float##dim value; \
                                                                                \
        if (IsLoadedToGSM())                                                    \
        {                                                                       \
            UNITY_UNROLL                                                            \
            for (uint i = 0; i < dim; i++)                                      \
                value[i] = BrushParams_GSM[ParameterOffsetCount + offset +i]; \
        }                                                                       \
        else                                                                    \
                                                                                                                                                                                    {                                                                       \
            uint offset = GetParameterOffset_UAV(); \
            UNITY_UNROLL                                                            \
            for (uint i = 0; i < dim; i++)                                      \
                value[i] = BrushParameters[offset +i]; \
        }                                                                       \
                                                                                \
        return value; \
    }

    Declare_GetParameter(1)
    Declare_GetParameter(2)
    Declare_GetParameter(3)
    Declare_GetParameter(4)
    
    #undef Decalre_GetParameter
    
    float SDF_Numerical(float3 p)
    {
        const float3 brushSize = GetParameter3(0);
        const float3 brushOffset = GetParameter3(3);

        const float3 nearest = clamp(p, float3(0.0, 0.0, 0.0), brushSize);
        const float sdf = SDF_SUPREMUM * BrushAtlas.SampleLevel(SDFSampler_Linear_Clamp, nearest + brushOffset, 0.0);
        
        return sdf + distance(nearest, p);
    }
    
    float SDF_Sphere(float3 p)
    {
        const float radius = GetParameter1(0);
        
        return length(p) - radius;
    }
    
    float SDF_Cube(float3 p)
    {
        const float3 size = GetParameter3(0);
        
        const float3 local = abs(p) - size;
        const float inside = min(max(max(local.x, local.y), local.z), 0.0);
        const float outside = length(max(local, float(0.0).xxx));

        return inside + outside;
    }
    
    float Sample(float3 wpos)
    {
        const float3 p = GetLocalPosition(wpos);

        float sdf;
        switch(Type)
        {
            case BRUSH_TYPE_NUMERICAL:
                sdf = SDF_Numerical(p);
                break;
            case BRUSH_TYPE_SPHERE:
                sdf = SDF_Sphere(p);
                break;
            case BRUSH_TYPE_CUBE:
                sdf = SDF_Cube(p);
                break;
            default:
                sdf = SDF_MAX;
                break;
        }

        return sdf * GetUniformScaleInv();
    }
    
    bool Cull(float3 wpos, float thres)
    {
        return abs(Sample(wpos)) <= thres;
    }
};

groupshared SDFBrush Brushes_GSM[MAX_GROUP_BRUSH_COUNT];
groupshared uint BrushCount_GSM;

void ClearBrushGSM()
{
    BrushCount_GSM = 0;
    BrushParamCount_GSM = 0;
}

bool LoadBrushToGSM(SDFBrush brush, out uint writtenIndex)
{
    const uint paramCount = brush.GetParameterCount_UAV();
    const uint paramOffset = brush.GetParameterOffset_UAV();
    uint gsmParamOffset;
    
    InterlockedAdd(BrushCount_GSM, 1, writtenIndex);
    if (writtenIndex < MAX_GROUP_BRUSH_COUNT)
    {
        InterlockedAdd(BrushParamCount_GSM, paramCount, gsmParamOffset);
        for (uint i = 0; i < paramCount; i++)
        {
            BrushParams_GSM[gsmParamOffset + i] = BrushParameters[paramOffset + i];
        }
        
        brush.SetParameterOffset_GSM(gsmParamOffset);
        Brushes_GSM[writtenIndex] = brush;
        return true;
    }

    return false;
}

void LoadBrushToGSMUnchecked(SDFBrush brush, uint dest)
{
    const uint paramCount = brush.GetParameterCount_UAV();
    const uint paramOffset = brush.GetParameterOffset_UAV();
    
    uint gsmParamOffset;
    InterlockedAdd(BrushParamCount_GSM, paramCount, gsmParamOffset);
    
    for (uint i = 0; i < paramCount; i++)
    BrushParams_GSM[gsmParamOffset +i] = BrushParameters[paramOffset +i];
    
    brush.SetParameterOffset_GSM(gsmParamOffset);
    Brushes_GSM[dest] = brush;
}

/// end brush definition

extern RWTexture3D<snorm float> SceneVolume;
// mip 0: indices to BrushIndices spans
// mip n: nonsense values, indicating mip masks only
extern RWTexture3D<uint> MaterialVolume;

// first element should be 1, skipping itself
extern RWBuffer<uint> BrushIndices;

extern RWBuffer<uint> DispatchCoords;
extern RWBuffer<uint> MipDispatches;

// note:
// D3D11_CS_DISPATCH_MAX_THREAD_GROUPS_PER_DIMENSION is 65535, which might be insufficient
// to store all the dispatches. thus, the number of dispatches is factored into three divisors
// and they are used as indirect arguments.
// e.g.:
// `GenerateSceneVolume` processes each 4^3 block of scene volume. for a 1024^3 scene volume,
// we need 256^3 dispatches in total, which can be factored into 1024 * 16384 * 1.
// the factorization should be taken carefully to balance performance and robustness. here i
// would take 1024 * 1 as the fixed divisor. (benchmark required)

// indirect buffer layout:
// total count | group x | group y | group z | elements...
// initial values:
//      0      |   1024  |    0    |    1    | elements...
void AllocateRange(RWBuffer<uint> buffer, uint n, uint bufferOffset, out uint indexOffset)
{
    InterlockedAdd(buffer[bufferOffset], n, indexOffset);

    indexOffset += bufferOffset;
}

extern RWBuffer<uint> IndirectArgs;
extern uint IndirectArgsOffset;

[numthreads(1, 1, 1)]
void GenerateIndirectArgs()
{
    const uint totalCount = IndirectArgs[IndirectArgsOffset];
    IndirectArgs[IndirectArgsOffset + 2] = (totalCount + 1023) / 1024;
}

void AllocateRange(RWBuffer<uint> buffer, uint n, out uint indexOffset)
{
    AllocateRange(buffer, n, 0, indexOffset);
}

uint GroupIDToDispatchIndex(uint3 gid)
{
    return gid.x + gid.y * 1024;
}

uint GetDispatchCount(RWBuffer<uint> buffer, uint bufferOffset)
{
    return buffer[bufferOffset];
}

uint GetDispatchCount(RWBuffer<uint> buffer)
{
    return GetDispatchCount(buffer, 0);
}

uint GetDispatchElement(RWBuffer<uint> buffer, uint index, uint bufferOffset)
{
    return buffer[bufferOffset +4 + index];
}

uint GetDispatchElement(RWBuffer<uint> buffer, uint index)
{
    return GetDispatchElement(buffer, index, 0);
}

void SetDispatchElement(RWBuffer<uint> buffer, uint index, uint element, uint bufferOffset)
{
    buffer[bufferOffset +4 + index] = element;
}

void SetDispatchElement(RWBuffer<uint> buffer, uint index, uint element)
{
    SetDispatchElement(buffer, index, element, 0);
}

/// end definations used by multiple kernels

/// begin generate material volume

#define MATERIAL_GRID_NULL 0u

extern StructuredBuffer<SDFBrush> SDFBrushes;

groupshared uint BrushIndices_GSM[MAX_GROUP_BRUSH_COUNT];
groupshared uint DispatchCoordCount_GSM;
groupshared uint DispatchCoords_GSM[4 * 4 * 4];
groupshared uint DispatchCoordOffset_GSM;

uint PackGridCoord(uint3 id)
{
    return (id.x << 21) | (id.y << 10) | id.z;
}

uint3 UnpackGridCoord(uint id)
{
    return uint3(id >> 21, (id >> 10) & 2047, id & 1023);
}

[numthreads(4, 4, 4)]
void GenerateMatVolume(uint3 gid : SV_GroupID, uint3 tid : SV_GroupThreadID, uint gi : SV_GroupIndex, uint3 id : SV_DispatchThreadID)
{
    if (!gi)
    {
        DispatchCoordCount_GSM = 0;
        ClearBrushGSM();
    }

    GroupMemoryBarrierWithGroupSync();

    uint index, gsmIndex;
    
    // cull brushes that are guaranteed to be apart from 16^3 tile
    const float tileRadius = MAT_TILE_CULL_RADIUS_W;
    const float3 tileCenter = VolumeIndexToWorldPos((gid * (4 * MAT_VOLUME_SCALE) + float(2 * MAT_VOLUME_SCALE - 0.5).xxx));
    
    for (index = gi; index < SDFBrushCount; index += 64)
    {
        SDFBrush brush = SDFBrushes[index];
        uint brushIndex;
        if (brush.Cull(tileCenter, tileRadius))
        {
            if (LoadBrushToGSM(brush, brushIndex))
                BrushIndices_GSM[brushIndex] = index;
            else
                break;
        }
    }

    GroupMemoryBarrierWithGroupSync();
    
    // traversal brushes that coincide with 16^3 tile and cull per grid
    const float gridRadius = MAT_GRID_CULL_RADIUS_W;
    const float3 gridPos = VolumeIndexToWorldPos(id * MAT_VOLUME_SCALE + float(0.5 * MAT_VOLUME_SCALE - 0.5).xxx);
    uint brushIndices[MAX_THREAD_BRUSH_COUNT], brushCount = 0;

    // store brushes(local)
    const uint tileBrushCount = min(BrushCount_GSM, MAX_GROUP_BRUSH_COUNT);
    for (index = 0; index < tileBrushCount && brushCount < MAX_THREAD_BRUSH_COUNT; index++)
        if (Brushes_GSM[index].Cull(gridPos, gridRadius))
        brushIndices[brushCount++] = BrushIndices_GSM[index];
    
    // store brushes(uav) and dispatch coordinates(gsm)
    if (brushCount)
    {
        // brush count | brush0 | brush1 | ...
        // first element is used as global counter, thus non-empty grid must be greater than 0
        InterlockedAdd(BrushIndices[0], brushCount + 1, index);
        
        MaterialVolume[id] = index;
        BrushIndices[index++] = brushCount;
        for (uint i = 0; i < brushCount; i++)
        BrushIndices[index + i] = brushIndices[i];
        
        // store scene generation dispatch coordinate
        InterlockedAdd(DispatchCoordCount_GSM, 1, index);
        DispatchCoords_GSM[index] = PackGridCoord(id);
    }
    else
        MaterialVolume[id] = MATERIAL_GRID_NULL;
    
    GroupMemoryBarrierWithGroupSync();

    // store dispatch coordinates(uav)
    if (DispatchCoordCount_GSM)
    {
        if (!gi)
            AllocateRange(DispatchCoords, DispatchCoordCount_GSM, DispatchCoordOffset_GSM);
        
        GroupMemoryBarrierWithGroupSync();
        
        if (gi < DispatchCoordCount_GSM)
            SetDispatchElement(DispatchCoords, DispatchCoordOffset_GSM + gi, DispatchCoords_GSM[gi]);
    }
}

/// end generate material volume

/// begin generate mipmap dispatch

extern RWTexture3D<uint> MaterialVolumeMip;

groupshared uint PrevMip_GSM[6 * 6 * 6];
groupshared uint MipDispatches_GSM[4 * 4 * 4];
groupshared uint MipDispatchCount_GSM;
groupshared uint MipDispatchOffset_GSM;

// todo: tighter bound generation
[numthreads(4, 4, 4)]
void GenerateMipDispatch(uint3 id : SV_DispatchThreadID, uint3 gid : SV_GroupID, uint3 gtid : SV_GroupThreadID, uint gi : SV_GroupIndex)
{
    const uint3 stride = uint3(1, 6, 36);
    
    uint i, j, k;
    for (i = gi; i < 6 * 6 * 6; i += 64)
    {
        PrevMip_GSM[i] = 0;
    }

    if(!gi)
        MipDispatchCount_GSM = 0;

    GroupMemoryBarrierWithGroupSync();

    const int3 loadGridOffset = int3(gid * 8 + gtid) - 1;
    const int3 loadBound = min(PrevMipVolumeSize, gid * 8 + 9);

    UNITY_UNROLL
    for (i = 0; i < 3; i++)
    {
        UNITY_UNROLL
        for (j = 0; j < 3; j++)
        {
            UNITY_UNROLL
            for (k = 0; k < 3; k++)
            {
                const int3 loadIndex = int3(i, j, k) * 4 + loadGridOffset;

                if (all(loadIndex > 0 && loadIndex < loadBound))
                {
                    const uint storeIndex = dot((uint3(i, j, k) * 4 + gtid + 1) / 2, stride);
                    const uint mask = MaterialVolume.Load(int4(loadIndex, 0));

                    InterlockedOr(PrevMip_GSM[storeIndex], mask);
                }
            }
        }
    }

    GroupMemoryBarrierWithGroupSync();

    const uint loadIndexOffset = dot(gtid, stride);

    uint mask = 0;
    UNITY_UNROLL
    for (i = 0; i < 3; i++)
    {
        UNITY_UNROLL
        for (j = 0; j < 3; j++)
        {
            UNITY_UNROLL
            for (k = 0; k < 3; k++)
            {
                const uint index = loadIndexOffset + dot(uint3(i, j, k), stride);

                mask |= PrevMip_GSM[index];
            }
        }
    }
    MaterialVolumeMip[id] = mask;

    if (mask)
    {
        uint index;
        InterlockedAdd(MipDispatchCount_GSM, 1, index);
        MipDispatches_GSM[index] = PackGridCoord(id);
    }

    GroupMemoryBarrierWithGroupSync();

    if (!gi)
        AllocateRange(MipDispatches, MipDispatchCount_GSM, DispatchArgumentsOffset, MipDispatchOffset_GSM);

    GroupMemoryBarrierWithGroupSync();

    if (gi < MipDispatchCount_GSM)
        SetDispatchElement(MipDispatches, gi, MipDispatches_GSM[gi], MipDispatchOffset_GSM);
}

/// end generate mipmap dispatch

/// begin generate scene volume

float SDFToSNorm(float sdf)
{
    return sdf * SDF_TO_SNORM;
}

groupshared float SDFGrids_GSM[8 * 8 * 8];

// 8 parallel threads per grid in 4^3 tile
[numthreads(8, 8, 8)]
void GenerateSceneVolume(uint3 gid : SV_GroupID, uint3 tid : SV_GroupThreadID, uint gi : SV_GroupIndex)
{
    if (!gi)
        ClearBrushGSM();

    GroupMemoryBarrierWithGroupSync();

    const uint dispatchID = GroupIDToDispatchIndex(gid);
    const bool isValid = dispatchID < GetDispatchCount(DispatchCoords);

    uint3 tileCoord;
    uint brushCount;
    uint threadOffset;
    uint threadIndex;
    if (isValid)
    {
        tileCoord = UnpackGridCoord(GetDispatchElement(DispatchCoords, dispatchID));
        const uint brushOffset = MaterialVolume[tileCoord] + 1;
        brushCount = BrushIndices[brushOffset -1];

        // read brushes into gsm
        // todo: it assumes the numeber of brushes that coincide with a grid of
        // material volume doesn't exceed 8^3(numthreads), which should be expl-
        // ictly defined
        threadOffset = dot(tid % 2, uint3(1, 2, 4));
        threadIndex = dot(tid / 2, uint3(1, 4, 16) * 8) + threadOffset;
        if (threadIndex < brushCount)
            LoadBrushToGSMUnchecked(SDFBrushes[BrushIndices[brushOffset +threadIndex]], threadIndex);
    }

    GroupMemoryBarrierWithGroupSync();

    uint3 gridCoord;
    if (isValid)
    {
        // generate smooth union of sdfs
        const uint3 alignedCoord = tileCoord * 4;
        gridCoord = alignedCoord + tid / 2;
        const float3 coord = VolumeIndexToWorldPos(gridCoord);

        float sdf = SDF_MAX;
        for (uint i = threadOffset; i < brushCount; i += 8)
        sdf = SmoothMin(sdf, Brushes_GSM[i].Sample(coord));
        
        SDFGrids_GSM[threadIndex] = sdf;
    }
    
    GroupMemoryBarrierWithGroupSync();
    
    if (isValid)
    {
        // parallel sdf union
        UNITY_UNROLL
        for (uint i = 4; i; i /= 2)
        {
            if (threadOffset < i)
                SDFGrids_GSM[threadIndex] = SmoothMin(SDFGrids_GSM[threadIndex], SDFGrids_GSM[threadIndex + i]);
            GroupMemoryBarrier();
        }
        
        if (!threadOffset)
        {
            SceneVolume[gridCoord] = SDFToSNorm(SDFGrids_GSM[threadIndex]);
            MaterialVolume[tileCoord] = Brushes_GSM[0].GetMaterialID();
        }
    }
}

/// end generate scene volume

/// begin generate mipmap

extern RWTexture3D < snorm float > SceneVolumeMip;

groupshared float SDFMips_GSM[8 * 8 * 8];

float Eikonal1(float x, float y)
{
    const float gridSpace = 1.0;

    return min(x, y) + gridSpace;
}

float Eikonal2(float x, float y)
{
    const float gridSpace = 1.0;

    const float sub = x - y;
    const float sum = x + y;
    const float d = 2.0 * gridSpace * gridSpace - sub * sub;
    return 0.5 * (sum + sqrt(d));
}

float Eikonal3(float x, float y, float z)
{
    const float third = 1.0 / 3.0;
    const float gridSpace = 1.0;
    const float3 xyz = float3(x, y, z);
    
    const float sum = x + y + z;
    const float sqsum = dot(xyz, xyz);
    const float d = sum * sum - 3.0 * (sqsum - gridSpace * gridSpace);
    
    if (d > 0.0)
        return third * (sum + sqrt(d));
    else
    {
        const bool3 cond = abs(xyz - xyz.zxy) < gridSpace.xxx;
        float res = cond.x ? Eikonal2(x, z) : Eikonal1(x, z);
        res = min(res, cond.y ? Eikonal2(y, x) : Eikonal1(y, x));
        res = min(res, cond.z ? Eikonal2(z, y) : Eikonal1(z, y));
        return res;
    }
}

float LoadSDF_GSM(int index, int2 range)
{
    return range.x <= index && index <= range.y ? SDFMips_GSM[index] : SDF_MAX;
}

float MinNeighbor(int index, int stride, int2 range)
{
    const float a = LoadSDF_GSM(index + stride, range);
    const float b = LoadSDF_GSM(index - stride, range);
    return min(a, b);
}

float SampleAverage(uint3 coord)
{
    if (all(coord < PrevMipVolumeSize))
    {
        const uint2 one = uint2(1, 0);
        float avg = SceneVolume.Load(int4(coord, 0));
        avg += SceneVolume.Load(int4(coord + one.xyy, 0));
        avg += SceneVolume.Load(int4(coord + one.yxy, 0));
        avg += SceneVolume.Load(int4(coord + one.xxy, 0));
        avg += SceneVolume.Load(int4(coord + one.yyx, 0));
        avg += SceneVolume.Load(int4(coord + one.xyx, 0));
        avg += SceneVolume.Load(int4(coord + one.yxx, 0));
        avg += SceneVolume.Load(int4(coord + one.xxx, 0));
        return avg * 0.125;
    }
    else
        return 1.0;
}

float AbsMax(float a, float b)
{
    return abs(a) < abs(b) ? b : a;
}

[numthreads(8, 8, 8)]
void GenerateMipMap(uint3 gid : SV_GroupID, uint gi : SV_GroupIndex, uint3 tid : SV_GroupThreadID)
{
    const uint dispatchID = GroupIDToDispatchIndex(gid);
    const bool isValid = dispatchID < GetDispatchCount(MipDispatches, DispatchArgumentsOffset);
    
    uint3 coord;
    float sdf;
    if (isValid)
    {
        coord = UnpackGridCoord(GetDispatchElement(MipDispatches, dispatchID, DispatchArgumentsOffset)) * MAT_VOLUME_SCALE;
        coord += tid - uint(MAT_VOLUME_SCALE / 2).xxx;
        const uint3 prevMipCoord = coord * 2;

        sdf = SampleAverage(prevMipCoord) * SDF_SUPREMUM;
        SDFMips_GSM[gi] = sdf;
    }

    GroupMemoryBarrierWithGroupSync();

    const uint2 xrange = (gi & ~7).xx + uint2(0, 7);
    // ((gi & ~63) + (gi % 8)).xx + uint2(0, 8 * 7)
    const uint2 yrange = (gi & ~56).xx + uint2(0, 8 * 7);
    const uint2 zrange = (gi % 64).xx + uint2(0, 64 * 7);

    float x, y, z;
    UNITY_UNROLL
    for (uint i = 0; i < 3; i++)
    {
        if (isValid)
        {
            if (abs(sdf) > SDF_SUPREMUM)
            {
                x = MinNeighbor(gi, 1, xrange);
                y = MinNeighbor(gi, 8, yrange);
                z = MinNeighbor(gi, 64, zrange);
                sdf = Eikonal3(x, y, z);
            }

            if (i < 2)
                SDFMips_GSM[gi] = sdf;
        }

        GroupMemoryBarrierWithGroupSync();
    }

    if (isValid && all(tid >= uint3(2, 2, 2) && tid < uint3(6, 6, 6)))
        SceneVolumeMip[coord] = SDFToSNorm(sdf) * 0.25;
}

/// end generate mipmap
