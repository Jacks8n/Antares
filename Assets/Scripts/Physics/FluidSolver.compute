// here a hybrid eulerian-lagrangian scheme is implemented, specifically a tailored mls-mpm [Hu et al. 2018].
// refer to the links below for detail:
//  - original mls-mpm paper: https://www.yzhu.io/projects/siggraph18_mlsmpm_cpic/index.html
//  - implementation examples: https://nialltl.neocities.org/articles/mpm_guide.html
//
// as for the sparse data structure, there are various choices, e.g., octree, vdb, spgrid.
// after some comparisons, i used something similar to the gspgrid as the sparse data structure.
// some references are available:
//  - original spgrid paper: https://pages.cs.wisc.edu/~sifakis/project_pages/SPGrid.html
//  - gpu optimization of mpm: https://doi.org/10.1145/3272127.3275044
//      - where gspgrid and some inspirng optimization are introduced
//  - taichi programming language: https://doi.org/10.1145/3355089.3356506
//      - special thanks to their benchmarks!
//  - original vdb paper: http://dx.doi.org/10.1145/2487228.2487235
//  - nanovdb implementation: https://github.com/AcademySoftwareFoundation/openvdb/blob/feature/nanovdb/nanovdb/nanovdb/nanovdb/NanoVDB.h

#pragma use_dxc
#pragma enable_d3d11_debug_symbols

#pragma kernel GenerateIndirectArgs
#pragma kernel SortParticle
#pragma kernel ParticleToGrid
#pragma kernel SolveGridLevel0
#pragma kernel SolveGridLevel1
#pragma kernel GridToParticle
#pragma kernel ClearFluidGridLevel0
#pragma kernel ClearFluidGridLevel1
#pragma kernel AddParticles

#include "FluidData.cginc"
#include "HLSLSupport.cginc"
#include "../Graphics/SDFUtil.cginc"

/// begin constant buffer

CBUFFER_START(PhysicsSceneParameters)
    float2 FluidGridResolution;
    #define FLUID_GRID_RESOLUTION FluidGridResolution.x
    #define FLUID_GRID_RESOLUTION_INV FluidGridResolution.y
CBUFFER_END

CBUFFER_START(PhysicsFrameParameters)
    // when the time step is 0, inverse of it should be 0 too
    float2 TimeStep;
    #define TIME_STEP TimeStep.x
    #define TIME_STEP_INV TimeStep.y

    float2 Padding1;

    float3 FluidGravity;
    #define GLOBAL_GRAVITY FluidGravity

    float Padding2;

    float3 FluidGridTranslation;
CBUFFER_END

/// end constant buffer

/// begin sort particle

#define SORT_PARTICLE_KERNEL_SIZE 128

/// begin generate indirect args

uint3 GetIndirectGroupCounts(uint count)
{
    return uint3(count % 64, (count + 64 - 1) / 64, 1);
}

uint GetIndirectGroupIndex(uint3 groupID)
{
    return groupID.x + groupID.y * 64;
}

extern RWBuffer<uint> IndirectArgs;

[numthreads(1, 1, 1)]
void GenerateIndirectArgs()
{
    const uint particleCount = GetFluidParticleCount();
    const uint totalGroupCount = (particleCount + SORT_PARTICLE_KERNEL_SIZE - 1) / SORT_PARTICLE_KERNEL_SIZE;

    const uint3 groupCounts = GetIndirectGroupCounts(totalGroupCount);
    IndirectArgs[0] = groupCounts.x;
    IndirectArgs[1] = groupCounts.y;
    IndirectArgs[2] = groupCounts.z;

    InvertFluidParticlePositionPingPongFlag();
    ResetAccumulateParticleCount();
}

/// end generate indirect args

float3 Square(float3 x)
{
    return x * x;
}

float Pow4(float x)
{
    x *= x;
    x *= x;
    return x;
}

float3 GetGridSpacePosition(float3 worldSpacePosition)
{
    return (worldSpacePosition - FluidGridTranslation) * FLUID_GRID_RESOLUTION_INV;
}

[numthreads(SORT_PARTICLE_KERNEL_SIZE, 1, 1)]
void SortParticle(uint3 gid : SV_GroupID, uint gi : SV_GroupIndex)
{
    const uint particleCount = GetFluidParticleCount();

    const uint groupIndex = GetIndirectGroupIndex(gid);
    const uint particleIndex = groupIndex * SORT_PARTICLE_KERNEL_SIZE + gi;

    if (particleIndex < particleCount)
    {
        const bool pingpongFlag = GetFluidParticlePositionPingPongFlag();

        const ParticlePositionIndexed position = GetFluidParticlePosition(particleIndex, pingpongFlag);
        const int3 gridPosition = int3(floor(GetGridSpacePosition(position.Position) - 0.5));

        AddParticleToFluidBlock(gridPosition, particleIndex, pingpongFlag);
    }
}

/// end sort particle

/// begin particle to grid

#define PARTICLE_TO_GRID_KERNEL_SIZE 128

#define FLUID_BLOCK_PADDING 2
#define FLUID_BLOCK_SIZE_LEVEL0_PADDED (FLUID_BLOCK_SIZE_LEVEL0 + FLUID_BLOCK_PADDING)
#define FLUID_BLOCK_GRID_COUNT_LEVEL0_PADDED (FLUID_BLOCK_SIZE_LEVEL0_PADDED * FLUID_BLOCK_SIZE_LEVEL0_PADDED * FLUID_BLOCK_SIZE_LEVEL0_PADDED)

struct ParticleGSM
{
    float Mass;

    float3 AffineRow0;

    float PositionX;

    float3 AffineRow1;

    float PositionY;

    float3 AffineRow2;

    float PositionZ;
    
    float3 GetPosition()
    {
        return float3(PositionX, PositionY, PositionZ);
    }

    void SetPosition(float3 position)
    {
        PositionX = position.x;
        PositionY = position.y;
        PositionZ = position.z;
    }

    float3x3 GetAffine()
    {
        return float3x3(AffineRow0, AffineRow1, AffineRow2);
    }

    void SetAffine(float3x3 affine)
    {
        AffineRow0 = affine._m00_m01_m02;
        AffineRow1 = affine._m10_m11_m12;
        AffineRow2 = affine._m20_m21_m22;
    }
};

void CalculateWeights(float3 gridToParticle, out float3 weight0, out float3 weight1, out float3 weight2)
{
    weight0 = 0.5 * Square(1.5 - gridToParticle);
    weight1 = 0.75 - Square(gridToParticle - 1.0);
    weight2 = 0.5 * Square(gridToParticle - 0.5);
}

void CalculateParticleGridTransfer(
    float3 particlePosition, uint3 gridPositionLevel1, out float3 blockSpacePos, out uint3 gridIndex,
    out float3 gridToParticle, out float3 weight0, out float3 weight1, out float3 weight2)
{
    blockSpacePos = GetGridSpacePosition(particlePosition) - gridPositionLevel1 * FLUID_BLOCK_SIZE_LEVEL0;
    gridIndex = uint3(blockSpacePos - float(0.5).xxx);
    gridToParticle = blockSpacePos - gridIndex;

    CalculateWeights(gridToParticle, weight0, weight1, weight2);
}

void WaveGetMaxInterval(bool flag, out uint interval, out uint maxInterval)
{
    const uint laneIndex = WaveGetLaneIndex();
    const uint laneCount = WaveGetLaneCount();

    interval = 1;
    uint stride = 1;
    while (stride < laneCount)
    {
        const uint dstLane = laneIndex + stride;
        const bool dstFlag = WaveReadLaneAt(flag, dstLane);

        if (dstLane < laneCount && !dstFlag)
            interval += WaveReadLaneAt(interval, dstLane);

        stride *= 2;
    }

    maxInterval = WaveActiveMax(flag ? interval : 0);
}

groupshared uint3 GridPositionLevel1_GSM;
groupshared uint ParticleCount_GSM;
groupshared uint SortParticleOffset_GSM;
// size: 16 * 216 = 3456 bytes
groupshared int4 FluidGrid_GSM[FLUID_BLOCK_GRID_COUNT_LEVEL0_PADDED];
// size: 52 * 60 = 3120 bytes
groupshared ParticleGSM Particles_GSM[FLUID_BLOCK_MAX_PARTICLE_COUNT];
// size: 4 * 216 = 864 bytes
groupshared int SDFGrid_GSM[FLUID_BLOCK_GRID_COUNT_LEVEL0_PADDED];
groupshared uint AdjacentBlockIndexLevel1_GSM[8];

[numthreads(PARTICLE_TO_GRID_KERNEL_SIZE, 1, 1)]
void ParticleToGrid(uint3 gid : SV_GroupID, uint gi : SV_GroupIndex)
{
    uint i, j, k, l;

    // initialize grid gsm
    for (i = gi; i < FLUID_BLOCK_GRID_COUNT_LEVEL0_PADDED; i += PARTICLE_TO_GRID_KERNEL_SIZE)
    {
        FluidGrid_GSM[i] = 0;

        // max sdf
        SDFGrid_GSM[i] = FLUID_GRID_ENCODED_VALUE_MAX;
    }

    if (!gi)
    {
        GetFluidBlockInfo(gid.x, GridPositionLevel1_GSM, ParticleCount_GSM);

        SortParticleOffset_GSM = AccumulateParticleCountAtomic(ParticleCount_GSM);
    }

    GroupMemoryBarrierWithGroupSync();

    const bool pingpongFlag = GetFluidParticlePositionPingPongFlag();

    // per particle scatter
    for (i = gi; i < ParticleCount_GSM; i += PARTICLE_TO_GRID_KERNEL_SIZE)
    {
        // read particle from arrays attached to block
        const uint particleIndex = GetFluidBlockParticleIndex(gid.x, i);
        const ParticlePositionIndexed position = GetFluidParticlePosition(particleIndex, pingpongFlag);
        const ParticleProperties properties = GetFluidParticleProperties(position.Index);

        const float3 velocity = properties.GetVelocity();
        const float3x3 affine = properties.GetAffine();

        // cache particle
        Particles_GSM[i].Mass = properties.Mass;
        Particles_GSM[i].SetPosition(position.Position);
        Particles_GSM[i].SetAffine(affine);

        // calculate indices and weights
        float3 blockSpacePos;
        uint3 gridIndex;
        float3 gridToParticle;
        float3 weights[3];
        CalculateParticleGridTransfer(
            position.Position, GridPositionLevel1_GSM, blockSpacePos, gridIndex, gridToParticle,
            weights[0], weights[1], weights[2]);

        const uint gridIndexEncoded = EncodeFluidGridIndexLevel0(gridIndex, FLUID_BLOCK_PADDING);

        // preparation to handle inter-wave conflicts
        const uint laneIndex = WaveGetLaneIndex();
        const bool isLo = gridIndexEncoded != WaveReadLaneAt(gridIndexEncoded, min(0, laneIndex - 1)) || !laneIndex;

        uint interval, intervalMax;
        WaveGetMaxInterval(isLo, interval, intervalMax);

        // simplified mls-mpm p2g
        UNITY_UNROLL
        for (j = 0; j < 3; j++)
        {
            UNITY_UNROLL
            for (k = 0; k < 3; k++)
            {
                UNITY_UNROLL
                for (l = 0; l < 3; l++)
                {
                    const float weight = weights[j].x * weights[k].y * weights[l].z;

                    const float3 x = float3(j, k, l) - gridToParticle;
                    const float3 affineVelocity = mul(affine, x);

                    float4 massMomentum = float4(
                        weight * properties.Mass,
                        massMomentum.x * (velocity + affineVelocity));
                    float sdf = length(x) - FLUID_PARTICLE_RADIUS;

                    uint stride = 1;
                    while (stride < intervalMax)
                    {
                        const uint dstLane = laneIndex + stride;
                        const float4 temp0 = WaveReadLaneAt(massMomentum, dstLane);
                        const float temp1 = WaveReadLaneAt(massMomentum, dstLane);

                        if (stride < interval)
                        {
                            massMomentum += temp0;
                            sdf = SmoothMin(sdf, temp1);
                        }

                        stride *= 2;
                    }

                    if (isLo)
                    {
                        const uint dstGridIndexEncoded = gridIndexEncoded + EncodeFluidGridIndexLevel0(uint3(j, k, l), FLUID_BLOCK_PADDING);
                        const int massEncoded = EncodeFluidGridMass(massMomentum.x);
                        const int3 momentumEncoded = EncodeFluidGridMomentum(massMomentum.yzw);
                        const int sdfEncoded = EncodeFluidGridSDF(sdf);

                        // currently 4-element atomic add is unspported
                        int _;
                        InterlockedAdd(FluidGrid_GSM[dstGridIndexEncoded].x, massEncoded, _);
                        InterlockedAdd(FluidGrid_GSM[dstGridIndexEncoded].y, momentumEncoded.x, _);
                        InterlockedAdd(FluidGrid_GSM[dstGridIndexEncoded].z, momentumEncoded.y, _);
                        InterlockedAdd(FluidGrid_GSM[dstGridIndexEncoded].w, momentumEncoded.z, _);

                        InterlockedMin(SDFGrid_GSM[dstGridIndexEncoded], sdfEncoded, _);
                    }
                }
            }
        }

        // sort particle
        SetFluidParticlePosition(SortParticleOffset_GSM + i, position, !pingpongFlag);
    }

    GroupMemoryBarrierWithGroupSync();

    // convert mass to float
    for (i = gi; i < FLUID_BLOCK_GRID_COUNT_LEVEL0_PADDED; i += PARTICLE_TO_GRID_KERNEL_SIZE)
    {
        const float massDecoded = DecodeFluidGridMass(FluidGrid_GSM[i].x);

        FluidGrid_GSM[i].x = asint(massDecoded);
    }

    GroupMemoryBarrierWithGroupSync();

    // density, pressure, stress etc.
    for (i = gi; i < ParticleCount_GSM; i += PARTICLE_TO_GRID_KERNEL_SIZE)
    {
        const ParticleGSM particle = Particles_GSM[i];

        // calculate indices and weights
        float3 blockSpacePos;
        uint3 gridIndexOffset;
        float3 gridToParticle;
        float3 weights[3];
        CalculateParticleGridTransfer(
            particle.GetPosition(), GridPositionLevel1_GSM, blockSpacePos, gridIndexOffset, gridToParticle,
            weights[0], weights[1], weights[2]);

        const uint gridIndexOffsetEncoded = EncodeFluidGridIndexLevel0(gridIndexOffset, FLUID_BLOCK_PADDING);

        float density = 0.0;
        for (j = 0; j < 3; j++)
        {
            for (k = 0; k < 3; k++)
            {
                for (l = 0; l < 3; l++)
                {
                    const float weight = weights[j].x * weights[k].y * weights[l].z;
                    const uint gridIndexEncoded = gridIndexOffsetEncoded + EncodeFluidGridIndexLevel0(uint3(j, k, l), FLUID_BLOCK_PADDING);

                    const float mass = asfloat(FluidGrid_GSM[gridIndexEncoded].x);
                    density += weight * mass;
                }
            }
        }

        // tait-murnaghan equation of state
        const float pressure = (FLUID_EOS_BULK_MODULUS * 0.25) * Pow4(density * (1.0 / FLUID_EOS_REST_DENSITY));
        const float volume = particle.Mass / density;
        const float3x3 affine = particle.GetAffine();

        float3x3 stress = FLUID_VISCOSITY_COEFFICIENT * (affine + transpose(affine));
        stress._m00 -= pressure;
        stress._m11 -= pressure;
        stress._m22 -= pressure;

        const float3x3 c = 3.0 * TIME_STEP * volume * stress;

        // preparation to handle inter-wave conflicts
        const uint laneIndex = WaveGetLaneIndex();
        const uint prevLane = min(0, laneIndex - 1);
        const bool isLo = gridIndexOffset != WaveReadLaneAt(gridIndexOffset, prevLane) || !laneIndex;

        uint interval, intervalMax;
        WaveGetMaxInterval(isLo, interval, intervalMax);

        for (j = 0; j < 3; j++)
        {
            for (k = 0; k < 3; k++)
            {
                for (l = 0; l < 3; l++)
                {
                    const float weight = weights[j].x * weights[k].y * weights[l].z;

                    float3 momentum = weight * mul(c, gridToParticle - float3(j, k, l));

                    uint stride = 1;
                    while (stride < intervalMax)
                    {
                        const uint dstLane = laneIndex + stride;
                        const float3 temp = WaveReadLaneAt(momentum, dstLane);

                        if (stride < interval)
                            momentum += temp;

                        stride *= 2;
                    }

                    if (isLo)
                    {
                        const uint dstGridIndexEncoded = gridIndexOffsetEncoded + EncodeFluidGridIndexLevel0(uint3(j, k, l), FLUID_BLOCK_PADDING);
                        const int3 momentumEncoded = EncodeFluidGridMomentum(momentum);

                        int _;
                        InterlockedAdd(FluidGrid_GSM[dstGridIndexEncoded].y, momentumEncoded.x, _);
                        InterlockedAdd(FluidGrid_GSM[dstGridIndexEncoded].z, momentumEncoded.y, _);
                        InterlockedAdd(FluidGrid_GSM[dstGridIndexEncoded].w, momentumEncoded.z, _);
                    }
                }
            }
        }
    }

    GroupMemoryBarrierWithGroupSync();

    // write to current block
    for (i = gi; i < FLUID_BLOCK_GRID_COUNT_LEVEL0; i += PARTICLE_TO_GRID_KERNEL_SIZE)
    {
        const uint3 srcGridIndex = DecodeFluidGridIndexLevel0(i);
        const uint loadGridIndex = EncodeFluidGridIndexLevel0(srcGridIndex, FLUID_BLOCK_PADDING);

        const uint3 blockIndexLevel0 = DecodeFluidBlockIndexLevel0(gid.x);

        const uint3 dstGridIndex = blockIndexLevel0 * FLUID_BLOCK_SIZE_LEVEL0 + srcGridIndex;

        const int4 gridValue = FluidGrid_GSM[loadGridIndex];

        int _;
        InterlockedAdd(FluidGridLevel0[dstGridIndex + FLUID_GRID_CHANNEL0_OFFSET], gridValue.x, _);
        InterlockedAdd(FluidGridLevel0[dstGridIndex + FLUID_GRID_CHANNEL1_OFFSET], gridValue.y, _);
        InterlockedAdd(FluidGridLevel0[dstGridIndex + FLUID_GRID_CHANNEL2_OFFSET], gridValue.z, _);
        InterlockedAdd(FluidGridLevel0[dstGridIndex + FLUID_GRID_CHANNEL3_OFFSET], gridValue.w, _);
    }

    if (gi < 8)
    {
        const uint3 adjacentGridIndex = uint3(gi & 1, (gi & 1) >> 1, gi >> 2);
        const uint3 adjacentGridPositionLevel1 = adjacentGridIndex + GridPositionLevel1_GSM;

        const uint3 adjacentGridPositionLevel2 = adjacentGridPositionLevel1 / FLUID_BLOCK_SIZE_LEVEL1;
        AdjacentBlockIndexLevel1_GSM[gi] = FluidGridLevel2[adjacentGridPositionLevel2];
    }

    GroupMemoryBarrierWithGroupSync();

    // write to adjacent blocks
    UNITY_UNROLL
    for (i = 1; i < 8; i++)
    {
        // query adjacent block
        const uint3 adjacentGridIndex = uint3(i & 1, (i & 1) >> 1, i >> 2);
        const uint3 adjacentGridPositionLevel1 = adjacentGridIndex + GridPositionLevel1_GSM;

        const uint3 adjacentGridPositionLevel2 = adjacentGridPositionLevel1 / FLUID_BLOCK_SIZE_LEVEL1;
        const uint3 adjacentGridOffsetLevel1 = adjacentGridPositionLevel1 % FLUID_BLOCK_COUNT_LEVEL1;
        const uint adjacentBlockIndexLevel1Encoded = AdjacentBlockIndexLevel1_GSM[i];

        // level 2 doesn't have "ghost cells"(terms used in original spgrid paper)
        // thus, if no level 1 block is allocated, grid values are just discarded
        if (IsValidFluidBlockIndex(adjacentBlockIndexLevel1Encoded))
        {
            const uint3 subblockMin = adjacentGridIndex * FLUID_BLOCK_SIZE_LEVEL0;
            const uint3 subblockMax = min(
                subblockMin + FLUID_BLOCK_SIZE_LEVEL0, FLUID_BLOCK_SIZE_LEVEL0_PADDED);
            const uint3 subblockSize = subblockMax - subblockMin;

            const uint3 srcGridIndex = DecodeGridIndexLinear(gi, subblockSize);
            if (all(srcGridIndex < subblockSize))
            {
                const uint loadGridIndex = EncodeFluidGridIndexLevel0(subblockMin + srcGridIndex, FLUID_BLOCK_PADDING);

                const int4 gridValue = FluidGrid_GSM[loadGridIndex];
                const int sdf = SDFGrid_GSM[loadGridIndex];

                const uint3 adjacentBlockIndexLevel1 = DecodeFluidBlockIndexLevel1(adjacentBlockIndexLevel1Encoded);
                const uint3 adjacentGridIndexLevel1 = adjacentBlockIndexLevel1 * FLUID_BLOCK_SIZE_LEVEL1 + adjacentGridOffsetLevel1;
                const uint3 adjacentBlockIndexLevel0Encoded = FluidGridLevel1[adjacentGridIndexLevel1];

                if (IsValidFluidBlockIndex(adjacentBlockIndexLevel0Encoded))
                {
                    // N.B.: here the thread count is guaranteed to be larger than grid count, thus no for loop is needed
                    // const uint gridCount = subblockSize.x * subblockSize.y * subblockSize.z;
                    // for (j = gi; j < gridCount; j += PARTICLE_TO_GRID_KERNEL_SIZE)

                    const uint3 adjacentBlockIndexLevel0 = DecodeFluidBlockIndexLevel0(adjacentBlockIndexLevel0Encoded);
                    const uint3 dstGridIndex = adjacentBlockIndexLevel0 * FLUID_BLOCK_SIZE_LEVEL0 + srcGridIndex;

                    int _;
                    InterlockedAdd(FluidGridLevel0[dstGridIndex + FLUID_GRID_CHANNEL0_OFFSET], gridValue.x, _);
                    InterlockedAdd(FluidGridLevel0[dstGridIndex + FLUID_GRID_CHANNEL1_OFFSET], gridValue.y, _);
                    InterlockedAdd(FluidGridLevel0[dstGridIndex + FLUID_GRID_CHANNEL2_OFFSET], gridValue.z, _);
                    InterlockedAdd(FluidGridLevel0[dstGridIndex + FLUID_GRID_CHANNEL3_OFFSET], gridValue.w, _);
                    InterlockedMin(FluidGridLevel0[dstGridIndex + FLUID_GRID_CHANNEL4_OFFSET], sdf, _);
                }
                else
                {
                    // if the level 0 is not allocated, add quantity to the coarser grid
                    // todo
                    // it may err if wave count is less than grid count
                    const int4 gridValueSum = WaveActiveSum(gridValue) / 8;

                    if (!gi)
                    {
                        int _;
                        InterlockedAdd(FluidGridLevel1[adjacentGridIndexLevel1 + FLUID_GRID_CHANNEL0_OFFSET], gridValueSum.x, _);
                        InterlockedAdd(FluidGridLevel1[adjacentGridIndexLevel1 + FLUID_GRID_CHANNEL1_OFFSET], gridValueSum.y, _);
                        InterlockedAdd(FluidGridLevel1[adjacentGridIndexLevel1 + FLUID_GRID_CHANNEL2_OFFSET], gridValueSum.z, _);
                        InterlockedAdd(FluidGridLevel1[adjacentGridIndexLevel1 + FLUID_GRID_CHANNEL3_OFFSET], gridValueSum.w, _);
                        InterlockedMin(FluidGridLevel0[adjacentGridIndexLevel1 + FLUID_GRID_CHANNEL4_OFFSET], sdf, _);
                    }
                }
            }
        }
    }

    // required in grid to particle
    if (!gi)
        SetFluidBlockParticleCountPrefixSum(gid.x, SortParticleOffset_GSM);
}

#undef FLUID_BLOCK_PADDING
#undef FLUID_BLOCK_SIZE_LEVEL0_PADDED
#undef FLUID_BLOCK_GRID_COUNT_LEVEL0_PADDED

/// end particle to grid

/// begin solve grid

#define SOLVE_GRID_LEVEL0_KERNEL_SIZE FLUID_BLOCK_SIZE_LEVEL0
#define SOLVE_GRID_LEVEL1_KERNEL_SIZE FLUID_BLOCK_SIZE_LEVEL1

void SolveGrid(float mass, float3 momentum, out float3 velocity)
{
    velocity = momentum / mass + TIME_STEP * GLOBAL_GRAVITY;

    // todo
    // apply boundary condition here

}

[numthreads(SOLVE_GRID_LEVEL0_KERNEL_SIZE, SOLVE_GRID_LEVEL0_KERNEL_SIZE, SOLVE_GRID_LEVEL0_KERNEL_SIZE)]
void SolveGridLevel0(uint3 gid : SV_GroupID, uint3 gtid : SV_GroupThreadID)
{
    const uint3 blockIndex = DecodeFluidBlockIndexLevel0(gid.x);
    const uint3 gridIndex = blockIndex * FLUID_BLOCK_SIZE_LEVEL0 + gtid;

    const int massEncoded = FluidGridLevel0[gridIndex + FLUID_GRID_CHANNEL0_OFFSET];
    const int3 momentumEncoded = int3(
        FluidGridLevel0[gridIndex + FLUID_GRID_CHANNEL1_OFFSET],
        FluidGridLevel0[gridIndex + FLUID_GRID_CHANNEL2_OFFSET],
        FluidGridLevel0[gridIndex + FLUID_GRID_CHANNEL3_OFFSET]);

    const float mass = DecodeFluidGridMass(massEncoded);
    const float3 momentum = DecodeFluidGridMomentum(momentumEncoded);

    float3 velocity;
    SolveGrid(mass, momentum, velocity);

    const int3 velocityEncoded = EncodeFluidGridMomentum(velocity);

    FluidGridLevel0[gridIndex + FLUID_GRID_CHANNEL1_OFFSET] = velocityEncoded.x;
    FluidGridLevel0[gridIndex + FLUID_GRID_CHANNEL2_OFFSET] = velocityEncoded.y;
    FluidGridLevel0[gridIndex + FLUID_GRID_CHANNEL3_OFFSET] = velocityEncoded.z;
}

[numthreads(SOLVE_GRID_LEVEL1_KERNEL_SIZE, SOLVE_GRID_LEVEL1_KERNEL_SIZE, SOLVE_GRID_LEVEL1_KERNEL_SIZE)]
void SolveGridLevel1(uint3 gid : SV_GroupID, uint3 gtid : SV_GroupThreadID)
{
    const uint3 blockIndex = DecodeFluidBlockIndexLevel1(gid.x);
    const uint3 gridIndex = blockIndex * FLUID_BLOCK_SIZE_LEVEL1 + gtid;

    const int massEncoded = FluidGridLevel1[gridIndex + FLUID_GRID_CHANNEL0_OFFSET];
    if (!IsValidFluidBlockIndex(massEncoded))
    {
        const int3 momentumEncoded = int3(
            FluidGridLevel1[gridIndex + FLUID_GRID_CHANNEL1_OFFSET],
            FluidGridLevel1[gridIndex + FLUID_GRID_CHANNEL2_OFFSET],
            FluidGridLevel1[gridIndex + FLUID_GRID_CHANNEL3_OFFSET]);

        const float mass = DecodeFluidGridMass(massEncoded);
        const float3 momentum = DecodeFluidGridMomentum(momentumEncoded);

        float3 velocity;
        SolveGrid(mass, momentum, velocity);

        const int3 velocityEncoded = EncodeFluidGridMomentum(velocity);

        FluidGridLevel1[gridIndex + FLUID_GRID_CHANNEL1_OFFSET] = velocityEncoded.x;
        FluidGridLevel1[gridIndex + FLUID_GRID_CHANNEL2_OFFSET] = velocityEncoded.y;
        FluidGridLevel1[gridIndex + FLUID_GRID_CHANNEL3_OFFSET] = velocityEncoded.z;
    }
}

/// end solve grid

/// begin grid to particle

#define GRID_TO_PARTICLE_KERNEL_SIZE 128

#define FLUID_BLOCK_PADDING 2
#define FLUID_BLOCK_SIZE_LEVEL0_PADDED (FLUID_BLOCK_SIZE_LEVEL0 + FLUID_BLOCK_PADDING)
#define FLUID_BLOCK_GRID_COUNT_LEVEL0_PADDED (FLUID_BLOCK_SIZE_LEVEL0_PADDED * FLUID_BLOCK_SIZE_LEVEL0_PADDED * FLUID_BLOCK_SIZE_LEVEL0_PADDED)

groupshared float3 VelocityGrid_GSM[FLUID_BLOCK_GRID_COUNT_LEVEL0_PADDED];

[numthreads(GRID_TO_PARTICLE_KERNEL_SIZE, 1, 1)]
void GridToParticle(uint3 gid : SV_GroupID, uint gi : SV_GroupIndex)
{
    uint3 gridPositionLevel1;
    uint particleCount;
    uint particleOffset;
    GetFluidBlockInfo(gid.x, gridPositionLevel1, particleCount, particleOffset);

    if (gi < 8)
    {
        const uint3 adjacentGridIndex = uint3(gi & 1, (gi & 1) >> 1, gi >> 2);
        const uint3 adjacentGridPositionLevel1 = adjacentGridIndex + gridPositionLevel1;

        const uint3 adjacentGridPositionLevel2 = adjacentGridPositionLevel1 / FLUID_BLOCK_SIZE_LEVEL1;
        AdjacentBlockIndexLevel1_GSM[gi] = FluidGridLevel2[adjacentGridPositionLevel2];
    }

    GroupMemoryBarrierWithGroupSync();

    uint i, j, k, l;

    // read from current block
    for (i = gi; i < FLUID_BLOCK_GRID_COUNT_LEVEL0; i += GRID_TO_PARTICLE_KERNEL_SIZE)
    {
        const uint3 dstGridIndex = DecodeFluidGridIndexLevel0(i);
        const uint storeGridIndex = EncodeFluidGridIndexLevel0(dstGridIndex, FLUID_BLOCK_PADDING);

        const uint3 blockIndexLevel0 = DecodeFluidBlockIndexLevel0(gid.x);

        const uint3 srcGridIndex = blockIndexLevel0 * FLUID_BLOCK_SIZE_LEVEL0 + srcGridIndex;

        const int3 velocityEncoded = int3(
            FluidGridLevel0[dstGridIndex + FLUID_GRID_CHANNEL1_OFFSET],
            FluidGridLevel0[dstGridIndex + FLUID_GRID_CHANNEL2_OFFSET],
            FluidGridLevel0[dstGridIndex + FLUID_GRID_CHANNEL3_OFFSET]);

        VelocityGrid_GSM[storeGridIndex] = DecodeFluidGridMomentum(velocityEncoded);
    }

    // read velocity from adjacent blocks
    UNITY_UNROLL
    for (i = 1; i < 8; i++)
    {
        // query adjacent block
        const uint3 adjacentGridIndex = uint3(i & 1, (i & 1) >> 1, i >> 2);
        const uint3 adjacentGridPositionLevel1 = adjacentGridIndex + gridPositionLevel1;

        const uint3 adjacentGridPositionLevel2 = adjacentGridPositionLevel1 / FLUID_BLOCK_SIZE_LEVEL1;
        const uint3 adjacentGridOffsetLevel1 = adjacentGridPositionLevel1 % FLUID_BLOCK_COUNT_LEVEL1;
        const uint adjacentBlockIndexLevel1Encoded = AdjacentBlockIndexLevel1_GSM[i];

        // level 2 doesn't have "ghost cells"(terms used in original spgrid paper)
        // thus, if no level 1 block is allocated, grid values are just discarded
        if (IsValidFluidBlockIndex(adjacentBlockIndexLevel1Encoded))
        {
            const uint3 subblockMin = adjacentGridIndex * FLUID_BLOCK_SIZE_LEVEL0;
            const uint3 subblockMax = min(
                subblockMin + FLUID_BLOCK_SIZE_LEVEL0, FLUID_BLOCK_SIZE_LEVEL0_PADDED);
            const uint3 subblockSize = subblockMax - subblockMin;

            const uint3 dstGridIndex = DecodeGridIndexLinear(gi, subblockSize);
            if (all(dstGridIndex < subblockSize))
            {
                const uint storeGridIndex = EncodeFluidGridIndexLevel0(subblockMin + dstGridIndex, FLUID_BLOCK_PADDING);

                const uint3 adjacentBlockIndexLevel1 = DecodeFluidBlockIndexLevel1(adjacentBlockIndexLevel1Encoded);
                const uint3 adjacentGridIndexLevel1 = adjacentBlockIndexLevel1 * FLUID_BLOCK_SIZE_LEVEL1 + adjacentGridOffsetLevel1;
                const uint3 adjacentBlockIndexLevel0Encoded = FluidGridLevel1[adjacentGridIndexLevel1];

                int3 velocityEncoded;
                if (IsValidFluidBlockIndex(adjacentBlockIndexLevel0Encoded))
                {
                    // N.B.: here the thread count is guaranteed to be larger than grid count, thus no for loop is needed
                    // const uint gridCount = subblockSize.x * subblockSize.y * subblockSize.z;
                    // for (j = gi; j < gridCount; j += PARTICLE_TO_GRID_KERNEL_SIZE)

                    const uint3 adjacentBlockIndexLevel0 = DecodeFluidBlockIndexLevel0(adjacentBlockIndexLevel0Encoded);
                    const uint3 srcGridIndex = adjacentBlockIndexLevel0 * FLUID_BLOCK_SIZE_LEVEL0 + dstGridIndex;

                    velocityEncoded = int3(
                        FluidGridLevel1[srcGridIndex + FLUID_GRID_CHANNEL1_OFFSET],
                        FluidGridLevel1[srcGridIndex + FLUID_GRID_CHANNEL2_OFFSET],
                        FluidGridLevel1[srcGridIndex + FLUID_GRID_CHANNEL3_OFFSET]);
                }
                else
                {
                    // if the level 0 is not allocated, read from the coarser grid
                    velocityEncoded = int3(
                        FluidGridLevel1[adjacentGridIndexLevel1 + FLUID_GRID_CHANNEL1_OFFSET],
                        FluidGridLevel1[adjacentGridIndexLevel1 + FLUID_GRID_CHANNEL2_OFFSET],
                        FluidGridLevel1[adjacentGridIndexLevel1 + FLUID_GRID_CHANNEL3_OFFSET]);
                }

                VelocityGrid_GSM[storeGridIndex] = DecodeFluidGridMomentum(velocityEncoded);
            }
        }
    }

    GroupMemoryBarrierWithGroupSync();

    const bool pingpongFlag = GetFluidParticlePositionPingPongFlag();

    // per particle gather
    for (i = gi; i < particleCount; i += PARTICLE_TO_GRID_KERNEL_SIZE)
    {
        // particles have been sorted into a linear array in particle-to-grid transfer.
        // thus they can be indexed without per-particle indirection.
        const uint particleIndex = particleOffset +i;

        ParticlePositionIndexed position = GetFluidParticlePosition(particleIndex, !pingpongFlag);

        float3 blockSpacePos;
        uint3 gridIndexOffset;
        float3 gridToParticleOffset;
        float3 weights[3];
        CalculateParticleGridTransfer(
            position.Position, gridPositionLevel1, blockSpacePos, gridIndexOffset, gridToParticleOffset,
            weights[0], weights[1], weights[2]);

        const uint gridIndexOffsetEncoded = EncodeFluidGridIndexLevel0(gridIndexOffset, FLUID_BLOCK_PADDING);

        float3x3 affine = 0.0;
        float3 velocity = 0.0;
        UNITY_UNROLL
        for (j = 0; j < 3; j++)
        {
            UNITY_UNROLL
            for (k = 0; k < 3; k++)
            {
                UNITY_UNROLL
                for (l = 0; l < 3; l++)
                {
                    const float weight = weights[j].x * weights[k].y * weights[l].z;

                    const float3 gridToParticle = gridToParticleOffset -float3(j, k, l);

                    const uint gridIndexEncoded = gridIndexOffsetEncoded + EncodeFluidGridIndexLevel0(uint3(j, k, l), FLUID_BLOCK_PADDING);
                    const float3 weightedVelocity = weight * VelocityGrid_GSM[gridIndexEncoded];

                    affine += float3x3(
                        gridToParticle * weightedVelocity.x,
                        gridToParticle * weightedVelocity.y,
                        gridToParticle * weightedVelocity.z);

                    velocity += weightedVelocity;
                }
            }
        }

        position.Position += velocity * TIME_STEP;

        SetFluidParticlePosition(particleIndex, position, !pingpongFlag);
        SetFluidParticleAffineVelocity(position.Index, affine, velocity);
    }
}

#undef FLUID_BLOCK_PADDING
#undef FLUID_BLOCK_SIZE_LEVEL0_PADDED
#undef FLUID_BLOCK_GRID_COUNT_LEVEL0_PADDED

/// end grid to particle

/// begin clear fluid grid

#define CLEAR_FLUID_GRID_LEVEL0_KERNEL_SIZE FLUID_BLOCK_SIZE_LEVEL0

[numthreads(CLEAR_FLUID_GRID_LEVEL0_KERNEL_SIZE, CLEAR_FLUID_GRID_LEVEL0_KERNEL_SIZE, CLEAR_FLUID_GRID_LEVEL0_KERNEL_SIZE)]
void ClearFluidGridLevel0(uint3 gid : SV_GroupID, uint3 gtid : SV_GroupThreadID)
{
    const uint3 blockIndex = DecodeFluidBlockIndexLevel0(gid.x);
    const uint3 gridOffset = blockIndex + gtid;

    FluidGridLevel0[gridOffset +FLUID_GRID_CHANNEL0_OFFSET] = 0;
    FluidGridLevel0[gridOffset +FLUID_GRID_CHANNEL1_OFFSET] = 0;
    FluidGridLevel0[gridOffset +FLUID_GRID_CHANNEL2_OFFSET] = 0;
    FluidGridLevel0[gridOffset +FLUID_GRID_CHANNEL3_OFFSET] = 0;
    FluidGridLevel0[gridOffset +FLUID_GRID_CHANNEL4_OFFSET] = 0;
}

#define CLEAR_FLUID_GRID_LEVEL1_KERNEL_SIZE FLUID_BLOCK_SIZE_LEVEL1

[numthreads(CLEAR_FLUID_GRID_LEVEL1_KERNEL_SIZE, CLEAR_FLUID_GRID_LEVEL1_KERNEL_SIZE, CLEAR_FLUID_GRID_LEVEL1_KERNEL_SIZE)]
void ClearFluidGridLevel1(uint3 gid : SV_GroupID, uint3 gtid : SV_GroupThreadID)
{
    const uint3 blockIndex = DecodeFluidBlockIndexLevel1(gid.x);
    const uint3 gridOffset = blockIndex + gtid;

    FluidGridLevel1[gridOffset +FLUID_GRID_CHANNEL0_OFFSET] = 0;
    FluidGridLevel1[gridOffset +FLUID_GRID_CHANNEL1_OFFSET] = 0;
    FluidGridLevel1[gridOffset +FLUID_GRID_CHANNEL2_OFFSET] = 0;
    FluidGridLevel1[gridOffset +FLUID_GRID_CHANNEL3_OFFSET] = 0;
    FluidGridLevel1[gridOffset +FLUID_GRID_CHANNEL4_OFFSET] = 0;
}

/// end clear fluid grid

/// begin add particle

#define ADD_PARTICLES_KERNEL_SIZE 128

CBUFFER_START(AddParticlesParameters)
    uint AddParticleCount;

    float Mass;
CBUFFER_END

extern ByteAddressBuffer ParticlesToAdd;

groupshared uint AddParticleOffset_GSM;

[numthreads(ADD_PARTICLES_KERNEL_SIZE, 1, 1)]
void AddParticles(uint3 gid : SV_GroupID, uint gi : SV_GroupIndex)
{
    const uint groupParticleCount = min(AddParticleCount - gid.x * ADD_PARTICLES_KERNEL_SIZE, ADD_PARTICLES_KERNEL_SIZE);
    const bool pingpongFlag = GetFluidParticlePositionPingPongFlag();

    if (!gi)
    {
        const uint offset = GetFluidParticleCountOffset();
        InterlockedAdd(FluidParticlePositions[offset], groupParticleCount, AddParticleOffset_GSM);
    }

    GroupMemoryBarrierWithGroupSync();

    if (gi < groupParticleCount)
    {
        const uint particleIndex = AddParticleOffset_GSM + gi;

        ParticlePositionIndexed position;
        ParticleProperties properties;

        const float4 word0 = asfloat(ParticlesToAdd.Load4(particleIndex * 24));
        const float2 word1 = asfloat(ParticlesToAdd.Load2(particleIndex * 24 + 16));

        position.Position = word0.xyz;
        properties.SetVelocity(float3(word0.w, word1));

        position.Index = particleIndex;
        properties.Mass = Mass;
        properties.SetZeroAffine();

        // write to next ping pong buffer in advance
        SetFluidParticlePosition(particleIndex, position, !pingpongFlag);
        SetFluidParticleProperties(particleIndex, properties);
    }
}

/// end add particle
